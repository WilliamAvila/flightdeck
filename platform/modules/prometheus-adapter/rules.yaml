# The default rules cause the adapter to crash with a lot of metrics
# https://github.com/kubernetes-sigs/prometheus-adapter/issues/292
default: false

# These metrics are for pod-aggregated metrics like requests per pod
custom:

# Expose any recorded metrics following the standard pod convention
- seriesQuery: '{__name__=~"^pod:.*:.*$",pod!=""}'
  resources:
    overrides:
      namespace:
        resource: namespace
      pod:
        resource: pod
  name:
    matches: "^pod:([^:]*):([^:]*)$"
    as: "${1}_${2}"
  metricsQuery: <<.Series>>{<<.LabelMatchers>>}

# Expose application service histograms as 95th percentile
- seriesQuery: '{__name__=~".*_app_.*bucket$",namespace!=""}'
  resources:
    overrides:
      namespace:
        resource: namespace
      service:
        resource: service
  name:
    matches: "^(.*)_bucket"
    as: "${1}_95p"
  metricsQuery: (histogram_quantile(0.95, sum(rate(<<.Series>>{<<.LabelMatchers>>}[5m])) without (instance, pod)))

# Expose total requests (ie istio_requests_total)
- seriesQuery: '{__name__=~".*_requests_total$",pod!=""}'
  resources:
    overrides:
      namespace:
        resource: namespace
      pod:
        resource: pod
  name:
    matches: "^(.*)_total"
    as: "${1}_per_second"
  metricsQuery: (sum(irate(<<.Series>>{<<.LabelMatchers>>}[1m])) by (<<.GroupBy>>))

# Expose jobs total (Sidekiq, DelayedJob)
- seriesQuery: '{__name__=~".*_jobs_total$",pod!=""}'
  resources:
    overrides:
      namespace:
        resource: namespace
      pod:
        resource: pod
  name:
    matches: "^(.*)_total"
    as: "${1}_per_second"
  metricsQuery: (sum(irate(<<.Series>>{<<.LabelMatchers>>}[1m])) by (<<.GroupBy>>))

# Expose http histograms (request rate, queue duration) as 95th percentile
- seriesQuery: '{__name__=~".*_http_.*bucket$",namespace!=""}'
  resources:
    overrides:
      namespace:
        resource: namespace
      service:
        resource: service
  name:
    matches: "^(.*)_bucket"
    as: "${1}_95p1m"
  metricsQuery: (histogram_quantile(0.95, sum(rate(<<.Series>>{<<.LabelMatchers>>}[1m])) by (le, job, namespace, service)))

# These metrics are for non-pod aggregated metrics like queue lengths
external:

# Queue backlogs (Sidekiq, DelayedJob)
- seriesQuery: '{__name__=~".*_backlog_total$",namespace!=""}'
  resources:
    overrides:
      namespace:
        resource: namespace
  name:
    matches: "^(.*)_total"
    as: "${1}_total"
  metricsQuery: (max(<<.Series>>{<<.LabelMatchers>>}) by (namespace, queue, queue_name))
- seriesQuery: '{__name__=~".*_backlog_count$",namespace!=""}'
  resources:
    overrides:
      namespace:
        resource: namespace
  name:
    matches: "^(.*)_count"
    as: "${1}_count"
  metricsQuery: (max(<<.Series>>{<<.LabelMatchers>>}) by (namespace, queue, queue_name))

# Queue latency (Sidekiq, DelayedJob)
- seriesQuery: '{__name__=~".*_latency_seconds$",namespace!=""}'
  resources:
    overrides:
      namespace:
        resource: namespace
  name:
    matches: "^(.*)_seconds"
    as: "${1}_seconds"
  metricsQuery: (max(<<.Series>>{<<.LabelMatchers>>}) by (namespace, queue, queue_name))
- seriesQuery: '{__name__=~".*_backlog_seconds$",namespace!=""}'
  resources:
    overrides:
      namespace:
        resource: namespace
  name:
    matches: "^(.*)_seconds"
    as: "${1}_seconds"
  metricsQuery: (max(<<.Series>>{<<.LabelMatchers>>}) by (namespace, queue, queue_name))
